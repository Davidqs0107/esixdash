/*
 * Copyright (c) 2015-2021, Episode Six and/or its affiliates. All rights reserved.
 * EPISODE SIX PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * THIS IS CONFIDENTIAL AND PROPRIETARY TO EPISODE SIX, and any
 * copying, reproduction, redistribution, dissemination, modification, or
 * other use, in whole or in part, is strictly prohibited without the prior
 * written consent of (or as may be specifically permitted in a fully signed
 * agreement with) Episode Six.   Violations may result in severe civil and/or
 * criminal penalties, and Episode Six will enforce its rights to the maximum
 * extent permitted by law.
 */

import axios from 'axios';


// This file has been auto generated by the java class GenerateAxiosClient
const CustomerAPI = (config) => {
    const { baseURL, ...others } = config;
    const instance = axios.create({ baseURL: `${baseURL}/v1/customer/`, ...others });

    return {
        interceptors: instance.interceptors,
        changePasscode: dto => instance.post('changepasscode', dto),
        changePassword: dto => instance.post('changepassword', dto),
        confirmWalletTransfer: dto => instance.put('/wallets/transfer/confirm', dto),
        create: (programName, dto) => instance.post(`${programName}`, dto),
        createCustomerAttribute: dto => instance.post('attrs', dto),
        createDispute: dto => instance.post('disputes', dto),
        createExtRef: dto => instance.post('extrefs', dto),
        createOrUpdateAutoTopUp: dto => instance.post('autoTopUp', dto),
        createOrUpdateReferenceAttribute: (extRefId, dto) => instance.post(`extrefs/${extRefId}/attributes`, dto),
        createUpdateAddress: dto => instance.post('addresses', dto),
        createUpdateEmail: dto => instance.post('emails', dto),
        createUpdatePhone: dto => instance.post('phones', dto),
        deleteAutoTopUp: () => instance.delete('autoTopUp'),
        deleteCustomerAttribute: customerAttrId => instance.delete(`attrs/${customerAttrId}`),
        deleteExternalReference: extRefId => instance.delete(`extrefs/${extRefId}`),
        deleteReferenceAttribute: (extRefId, attributeName) => instance.delete(`extrefs/${extRefId}/attributes/${attributeName}`),
        estimateP2pTransfer: dto => instance.put('/p2p/estimate', dto),
        get: () => instance.get(''),
        getAddress: () => instance.get('addresses'),
        getAuthorizations: () => instance.get('authholds'),
        getAutoTopUp: () => instance.get('autoTopUp'),
        getCustomerAttribute: customerAttrId => instance.get(`attrs/${customerAttrId}`),
        getCustomerAttributes: () => instance.get('attrs'),
        getCustomerProfile: () => instance.get('profile'),
        getDisputes: () => instance.get('disputes'),
        getEmails: () => instance.get('emails'),
        getExchangeQuote: dto => instance.post('/exchange/quote', dto),
        getExchangeRates: dto => instance.post('exchange/rates', dto),
        getExternalReference: extRefId => instance.get(`extrefs/${extRefId}`),
        getExternalReferences: () => instance.get('extrefs'),
        getFees: () => instance.get('fees'),
        getPhones: () => instance.get('phones'),
        getRiskMeasurements: () => instance.get('risk/measurements'),
        getTransaction: transactionId => instance.get(`transactions/${transactionId}`),
        getWallets: currency => instance.get('wallets', { params: { currency } }),
        listActions: extRefId => instance.post(`extrefs/${extRefId}/actions`),
        // eslint-disable-next-line object-curly-newline,max-len
        listPendingTransactions: ({ transactionState, transactionType, currentReleaseTime, releaseTime, startTime, endTime, externalReference, includeRequestingCustomerId, count, startIndex, ascending }) => instance.get('transactions/pending', { params: { 'transaction-state': transactionState, 'transaction-type': transactionType, 'current-release-time': currentReleaseTime, 'release-time': releaseTime, 'start-time': startTime, 'end-time': endTime, 'external-reference': externalReference, 'include-requesting-customer-id': includeRequestingCustomerId, count, 'start-index': startIndex, ascending } }),
        listReferenceAttributes: extRefId => instance.get(`extrefs/${extRefId}/attributes`),
        // eslint-disable-next-line object-curly-newline,max-len
        listTransactions: ({ count, startIndex, ascending, transactionType, startTime, endTime, extRefId, transactionSource, currency }) => instance.get('transactions', { params: { count, 'start-index': startIndex, ascending, 'transaction-type': transactionType, 'start-time': startTime, 'end-time': endTime, 'ext-ref-id': extRefId, 'transaction-source': transactionSource, currency } }),
        logout: () => instance.get('logout'),
        p2pTransfer: dto => instance.post('/p2p', dto),
        requestPasscodeReset: () => instance.post('passcode/reset'),
        safeDraft: (currency, dto) => instance.post(`safeDraft/${currency}`, dto),
        safeDraft2: dto => instance.post('safeDraft', dto),
        updateCustomerAttribute: (customerAttrId, dto) => instance.put(`attrs/${customerAttrId}`, dto),
        validatePasscode: dto => instance.post('validate/passcode', dto),
        validatePassword: dto => instance.post('validate/password', dto),
    };
};

export default CustomerAPI;
